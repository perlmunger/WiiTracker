//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
#pragma warning disable 1591

namespace WiiTracker.com.cdyne.ws {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PhoneNotifySoap", Namespace="http://ws.cdyne.com/NotifyWS/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Response))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class PhoneNotify : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnSoundFileIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSoundFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSoundFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordSoundViaPhoneCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueueIDStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneEnglishBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneBasicWithTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleQueueIdStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyMultiplePhoneBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneBasicWithTryCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneAdvancedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResponseCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVoicesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PhoneNotify() {
            this.Url = global::WiiTracker.Properties.Settings.Default.WiiTracker_com_cdyne_ws_PhoneNotify;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        public event ReturnSoundFileIDsCompletedEventHandler ReturnSoundFileIDsCompleted;
        
        /// <remarks/>
        public event RemoveSoundFileCompletedEventHandler RemoveSoundFileCompleted;
        
        /// <remarks/>
        public event UploadSoundFileCompletedEventHandler UploadSoundFileCompleted;
        
        /// <remarks/>
        public event RecordSoundViaPhoneCallCompletedEventHandler RecordSoundViaPhoneCallCompleted;
        
        /// <remarks/>
        public event GetQueueIDStatusCompletedEventHandler GetQueueIDStatusCompleted;
        
        /// <remarks/>
        public event NotifyPhoneEnglishBasicCompletedEventHandler NotifyPhoneEnglishBasicCompleted;
        
        /// <remarks/>
        public event NotifyPhoneBasicWithTransferCompletedEventHandler NotifyPhoneBasicWithTransferCompleted;
        
        /// <remarks/>
        public event GetMultipleQueueIdStatusCompletedEventHandler GetMultipleQueueIdStatusCompleted;
        
        /// <remarks/>
        public event NotifyMultiplePhoneBasicCompletedEventHandler NotifyMultiplePhoneBasicCompleted;
        
        /// <remarks/>
        public event NotifyPhoneBasicCompletedEventHandler NotifyPhoneBasicCompleted;
        
        /// <remarks/>
        public event NotifyPhoneBasicWithTryCountCompletedEventHandler NotifyPhoneBasicWithTryCountCompleted;
        
        /// <remarks/>
        public event NotifyPhoneAdvancedCompletedEventHandler NotifyPhoneAdvancedCompleted;
        
        /// <remarks/>
        public event GetResponseCodesCompletedEventHandler GetResponseCodesCompleted;
        
        /// <remarks/>
        public event getVoicesCompletedEventHandler getVoicesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetVersion", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/ReturnSoundFileIDs", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] ReturnSoundFileIDs(string LicenseKey) {
            object[] results = this.Invoke("ReturnSoundFileIDs", new object[] {
                        LicenseKey});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ReturnSoundFileIDsAsync(string LicenseKey) {
            this.ReturnSoundFileIDsAsync(LicenseKey, null);
        }
        
        /// <remarks/>
        public void ReturnSoundFileIDsAsync(string LicenseKey, object userState) {
            if ((this.ReturnSoundFileIDsOperationCompleted == null)) {
                this.ReturnSoundFileIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnSoundFileIDsOperationCompleted);
            }
            this.InvokeAsync("ReturnSoundFileIDs", new object[] {
                        LicenseKey}, this.ReturnSoundFileIDsOperationCompleted, userState);
        }
        
        private void OnReturnSoundFileIDsOperationCompleted(object arg) {
            if ((this.ReturnSoundFileIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnSoundFileIDsCompleted(this, new ReturnSoundFileIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/RemoveSoundFile", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveSoundFile(string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("RemoveSoundFile", new object[] {
                        SoundFileID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveSoundFileAsync(string SoundFileID, string LicenseKey) {
            this.RemoveSoundFileAsync(SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void RemoveSoundFileAsync(string SoundFileID, string LicenseKey, object userState) {
            if ((this.RemoveSoundFileOperationCompleted == null)) {
                this.RemoveSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSoundFileOperationCompleted);
            }
            this.InvokeAsync("RemoveSoundFile", new object[] {
                        SoundFileID,
                        LicenseKey}, this.RemoveSoundFileOperationCompleted, userState);
        }
        
        private void OnRemoveSoundFileOperationCompleted(object arg) {
            if ((this.RemoveSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSoundFileCompleted(this, new RemoveSoundFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/UploadSoundFile", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadFileResponse UploadSoundFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileBinary, string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("UploadSoundFile", new object[] {
                        FileBinary,
                        SoundFileID,
                        LicenseKey});
            return ((UploadFileResponse)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSoundFileAsync(byte[] FileBinary, string SoundFileID, string LicenseKey) {
            this.UploadSoundFileAsync(FileBinary, SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void UploadSoundFileAsync(byte[] FileBinary, string SoundFileID, string LicenseKey, object userState) {
            if ((this.UploadSoundFileOperationCompleted == null)) {
                this.UploadSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSoundFileOperationCompleted);
            }
            this.InvokeAsync("UploadSoundFile", new object[] {
                        FileBinary,
                        SoundFileID,
                        LicenseKey}, this.UploadSoundFileOperationCompleted, userState);
        }
        
        private void OnUploadSoundFileOperationCompleted(object arg) {
            if ((this.UploadSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSoundFileCompleted(this, new UploadSoundFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/RecordSoundViaPhoneCall", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecordSoundViaPhoneCall(string PhoneNumberToDial, string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("RecordSoundViaPhoneCall", new object[] {
                        PhoneNumberToDial,
                        SoundFileID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecordSoundViaPhoneCallAsync(string PhoneNumberToDial, string SoundFileID, string LicenseKey) {
            this.RecordSoundViaPhoneCallAsync(PhoneNumberToDial, SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void RecordSoundViaPhoneCallAsync(string PhoneNumberToDial, string SoundFileID, string LicenseKey, object userState) {
            if ((this.RecordSoundViaPhoneCallOperationCompleted == null)) {
                this.RecordSoundViaPhoneCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordSoundViaPhoneCallOperationCompleted);
            }
            this.InvokeAsync("RecordSoundViaPhoneCall", new object[] {
                        PhoneNumberToDial,
                        SoundFileID,
                        LicenseKey}, this.RecordSoundViaPhoneCallOperationCompleted, userState);
        }
        
        private void OnRecordSoundViaPhoneCallOperationCompleted(object arg) {
            if ((this.RecordSoundViaPhoneCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordSoundViaPhoneCallCompleted(this, new RecordSoundViaPhoneCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetQueueIDStatus", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn GetQueueIDStatus(long QueueID) {
            object[] results = this.Invoke("GetQueueIDStatus", new object[] {
                        QueueID});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueueIDStatusAsync(long QueueID) {
            this.GetQueueIDStatusAsync(QueueID, null);
        }
        
        /// <remarks/>
        public void GetQueueIDStatusAsync(long QueueID, object userState) {
            if ((this.GetQueueIDStatusOperationCompleted == null)) {
                this.GetQueueIDStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueueIDStatusOperationCompleted);
            }
            this.InvokeAsync("GetQueueIDStatus", new object[] {
                        QueueID}, this.GetQueueIDStatusOperationCompleted, userState);
        }
        
        private void OnGetQueueIDStatusOperationCompleted(object arg) {
            if ((this.GetQueueIDStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueueIDStatusCompleted(this, new GetQueueIDStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneEnglishBasic", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneEnglishBasic(string PhoneNumberToDial, string TextToSay, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneEnglishBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneEnglishBasicAsync(string PhoneNumberToDial, string TextToSay, string LicenseKey) {
            this.NotifyPhoneEnglishBasicAsync(PhoneNumberToDial, TextToSay, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneEnglishBasicAsync(string PhoneNumberToDial, string TextToSay, string LicenseKey, object userState) {
            if ((this.NotifyPhoneEnglishBasicOperationCompleted == null)) {
                this.NotifyPhoneEnglishBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneEnglishBasicOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneEnglishBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        LicenseKey}, this.NotifyPhoneEnglishBasicOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneEnglishBasicOperationCompleted(object arg) {
            if ((this.NotifyPhoneEnglishBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneEnglishBasicCompleted(this, new NotifyPhoneEnglishBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneBasicWithTransfer", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneBasicWithTransfer(string PhoneNumberToDial, string TransferNumber, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneBasicWithTransfer", new object[] {
                        PhoneNumberToDial,
                        TransferNumber,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTransferAsync(string PhoneNumberToDial, string TransferNumber, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyPhoneBasicWithTransferAsync(PhoneNumberToDial, TransferNumber, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTransferAsync(string PhoneNumberToDial, string TransferNumber, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyPhoneBasicWithTransferOperationCompleted == null)) {
                this.NotifyPhoneBasicWithTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneBasicWithTransferOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneBasicWithTransfer", new object[] {
                        PhoneNumberToDial,
                        TransferNumber,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyPhoneBasicWithTransferOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneBasicWithTransferOperationCompleted(object arg) {
            if ((this.NotifyPhoneBasicWithTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneBasicWithTransferCompleted(this, new NotifyPhoneBasicWithTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetMultipleQueueIdStatus", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] GetMultipleQueueIdStatus(string QueueIDs, string LicenseKey) {
            object[] results = this.Invoke("GetMultipleQueueIdStatus", new object[] {
                        QueueIDs,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleQueueIdStatusAsync(string QueueIDs, string LicenseKey) {
            this.GetMultipleQueueIdStatusAsync(QueueIDs, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetMultipleQueueIdStatusAsync(string QueueIDs, string LicenseKey, object userState) {
            if ((this.GetMultipleQueueIdStatusOperationCompleted == null)) {
                this.GetMultipleQueueIdStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleQueueIdStatusOperationCompleted);
            }
            this.InvokeAsync("GetMultipleQueueIdStatus", new object[] {
                        QueueIDs,
                        LicenseKey}, this.GetMultipleQueueIdStatusOperationCompleted, userState);
        }
        
        private void OnGetMultipleQueueIdStatusOperationCompleted(object arg) {
            if ((this.GetMultipleQueueIdStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleQueueIdStatusCompleted(this, new GetMultipleQueueIdStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyMultiplePhoneBasic", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] NotifyMultiplePhoneBasic(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyMultiplePhoneBasic", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyMultiplePhoneBasicAsync(PhoneNumbersToDial, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyMultiplePhoneBasicOperationCompleted == null)) {
                this.NotifyMultiplePhoneBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyMultiplePhoneBasicOperationCompleted);
            }
            this.InvokeAsync("NotifyMultiplePhoneBasic", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyMultiplePhoneBasicOperationCompleted, userState);
        }
        
        private void OnNotifyMultiplePhoneBasicOperationCompleted(object arg) {
            if ((this.NotifyMultiplePhoneBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyMultiplePhoneBasicCompleted(this, new NotifyMultiplePhoneBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneBasic", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneBasic(string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicAsync(string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyPhoneBasicAsync(PhoneNumberToDial, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicAsync(string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyPhoneBasicOperationCompleted == null)) {
                this.NotifyPhoneBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneBasicOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyPhoneBasicOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneBasicOperationCompleted(object arg) {
            if ((this.NotifyPhoneBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneBasicCompleted(this, new NotifyPhoneBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneBasicWithTryCount", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneBasicWithTryCount(short TryCount, string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneBasicWithTryCount", new object[] {
                        TryCount,
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTryCountAsync(short TryCount, string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyPhoneBasicWithTryCountAsync(TryCount, PhoneNumberToDial, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTryCountAsync(short TryCount, string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyPhoneBasicWithTryCountOperationCompleted == null)) {
                this.NotifyPhoneBasicWithTryCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneBasicWithTryCountOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneBasicWithTryCount", new object[] {
                        TryCount,
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyPhoneBasicWithTryCountOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneBasicWithTryCountOperationCompleted(object arg) {
            if ((this.NotifyPhoneBasicWithTryCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneBasicWithTryCountCompleted(this, new NotifyPhoneBasicWithTryCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneAdvanced", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneAdvanced(AdvancedNotifyRequest anr) {
            object[] results = this.Invoke("NotifyPhoneAdvanced", new object[] {
                        anr});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneAdvancedAsync(AdvancedNotifyRequest anr) {
            this.NotifyPhoneAdvancedAsync(anr, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneAdvancedAsync(AdvancedNotifyRequest anr, object userState) {
            if ((this.NotifyPhoneAdvancedOperationCompleted == null)) {
                this.NotifyPhoneAdvancedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneAdvancedOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneAdvanced", new object[] {
                        anr}, this.NotifyPhoneAdvancedOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneAdvancedOperationCompleted(object arg) {
            if ((this.NotifyPhoneAdvancedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneAdvancedCompleted(this, new NotifyPhoneAdvancedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetResponseCodes", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetResponseCodes() {
            object[] results = this.Invoke("GetResponseCodes", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResponseCodesAsync() {
            this.GetResponseCodesAsync(null);
        }
        
        /// <remarks/>
        public void GetResponseCodesAsync(object userState) {
            if ((this.GetResponseCodesOperationCompleted == null)) {
                this.GetResponseCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponseCodesOperationCompleted);
            }
            this.InvokeAsync("GetResponseCodes", new object[0], this.GetResponseCodesOperationCompleted, userState);
        }
        
        private void OnGetResponseCodesOperationCompleted(object arg) {
            if ((this.GetResponseCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponseCodesCompleted(this, new GetResponseCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/getVoices", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Voice[] getVoices() {
            object[] results = this.Invoke("getVoices", new object[0]);
            return ((Voice[])(results[0]));
        }
        
        /// <remarks/>
        public void getVoicesAsync() {
            this.getVoicesAsync(null);
        }
        
        /// <remarks/>
        public void getVoicesAsync(object userState) {
            if ((this.getVoicesOperationCompleted == null)) {
                this.getVoicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVoicesOperationCompleted);
            }
            this.InvokeAsync("getVoices", new object[0], this.getVoicesOperationCompleted, userState);
        }
        
        private void OngetVoicesOperationCompleted(object arg) {
            if ((this.getVoicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVoicesCompleted(this, new getVoicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class UploadFileResponse {
        
        private bool uploadSuccessfulField;
        
        private string errorResponseField;
        
        /// <remarks/>
        public bool UploadSuccessful {
            get {
                return this.uploadSuccessfulField;
            }
            set {
                this.uploadSuccessfulField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorResponse {
            get {
                return this.errorResponseField;
            }
            set {
                this.errorResponseField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class Response {
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class Voice {
        
        private int voiceIDField;
        
        private string voiceNameField;
        
        private string voiceGenderField;
        
        private int voiceAgeField;
        
        private string voiceLanguageField;
        
        private string voiceSummaryField;
        
        /// <remarks/>
        public int VoiceID {
            get {
                return this.voiceIDField;
            }
            set {
                this.voiceIDField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceName {
            get {
                return this.voiceNameField;
            }
            set {
                this.voiceNameField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceGender {
            get {
                return this.voiceGenderField;
            }
            set {
                this.voiceGenderField = value;
            }
        }
        
        /// <remarks/>
        public int VoiceAge {
            get {
                return this.voiceAgeField;
            }
            set {
                this.voiceAgeField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceLanguage {
            get {
                return this.voiceLanguageField;
            }
            set {
                this.voiceLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceSummary {
            get {
                return this.voiceSummaryField;
            }
            set {
                this.voiceSummaryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class AdvancedNotifyRequest {
        
        private string phoneNumberToDialField;
        
        private string transferNumberField;
        
        private int voiceIDField;
        
        private string callerIDNumberField;
        
        private string callerIDNameField;
        
        private string textToSayField;
        
        private string licenseKeyField;
        
        private int tryCountField;
        
        private int nextTryInSecondsField;
        
        private System.DateTime uTCScheduledDateTimeField;
        
        private byte tTSrateField;
        
        private byte tTSvolumeField;
        
        /// <remarks/>
        public string PhoneNumberToDial {
            get {
                return this.phoneNumberToDialField;
            }
            set {
                this.phoneNumberToDialField = value;
            }
        }
        
        /// <remarks/>
        public string TransferNumber {
            get {
                return this.transferNumberField;
            }
            set {
                this.transferNumberField = value;
            }
        }
        
        /// <remarks/>
        public int VoiceID {
            get {
                return this.voiceIDField;
            }
            set {
                this.voiceIDField = value;
            }
        }
        
        /// <remarks/>
        public string CallerIDNumber {
            get {
                return this.callerIDNumberField;
            }
            set {
                this.callerIDNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CallerIDName {
            get {
                return this.callerIDNameField;
            }
            set {
                this.callerIDNameField = value;
            }
        }
        
        /// <remarks/>
        public string TextToSay {
            get {
                return this.textToSayField;
            }
            set {
                this.textToSayField = value;
            }
        }
        
        /// <remarks/>
        public string LicenseKey {
            get {
                return this.licenseKeyField;
            }
            set {
                this.licenseKeyField = value;
            }
        }
        
        /// <remarks/>
        public int TryCount {
            get {
                return this.tryCountField;
            }
            set {
                this.tryCountField = value;
            }
        }
        
        /// <remarks/>
        public int NextTryInSeconds {
            get {
                return this.nextTryInSecondsField;
            }
            set {
                this.nextTryInSecondsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UTCScheduledDateTime {
            get {
                return this.uTCScheduledDateTimeField;
            }
            set {
                this.uTCScheduledDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public byte TTSrate {
            get {
                return this.tTSrateField;
            }
            set {
                this.tTSrateField = value;
            }
        }
        
        /// <remarks/>
        public byte TTSvolume {
            get {
                return this.tTSvolumeField;
            }
            set {
                this.tTSvolumeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class NotifyReturn {
        
        private int responseCodeField;
        
        private string responseTextField;
        
        private bool callAnsweredField;
        
        private long queueIDField;
        
        private int tryCountField;
        
        private bool demoField;
        
        private string digitsPressedField;
        
        private string machineDetectionField;
        
        private int durationField;
        
        private System.DateTime startTimeField;
        
        private System.DateTime endTimeField;
        
        private decimal minuteRateField;
        
        private string countryField;
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
        
        /// <remarks/>
        public bool CallAnswered {
            get {
                return this.callAnsweredField;
            }
            set {
                this.callAnsweredField = value;
            }
        }
        
        /// <remarks/>
        public long QueueID {
            get {
                return this.queueIDField;
            }
            set {
                this.queueIDField = value;
            }
        }
        
        /// <remarks/>
        public int TryCount {
            get {
                return this.tryCountField;
            }
            set {
                this.tryCountField = value;
            }
        }
        
        /// <remarks/>
        public bool Demo {
            get {
                return this.demoField;
            }
            set {
                this.demoField = value;
            }
        }
        
        /// <remarks/>
        public string DigitsPressed {
            get {
                return this.digitsPressedField;
            }
            set {
                this.digitsPressedField = value;
            }
        }
        
        /// <remarks/>
        public string MachineDetection {
            get {
                return this.machineDetectionField;
            }
            set {
                this.machineDetectionField = value;
            }
        }
        
        /// <remarks/>
        public int Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        public decimal MinuteRate {
            get {
                return this.minuteRateField;
            }
            set {
                this.minuteRateField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReturnSoundFileIDsCompletedEventHandler(object sender, ReturnSoundFileIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnSoundFileIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnSoundFileIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveSoundFileCompletedEventHandler(object sender, RemoveSoundFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveSoundFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveSoundFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void UploadSoundFileCompletedEventHandler(object sender, UploadSoundFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSoundFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSoundFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadFileResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadFileResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RecordSoundViaPhoneCallCompletedEventHandler(object sender, RecordSoundViaPhoneCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordSoundViaPhoneCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordSoundViaPhoneCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetQueueIDStatusCompletedEventHandler(object sender, GetQueueIDStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueueIDStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueueIDStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void NotifyPhoneEnglishBasicCompletedEventHandler(object sender, NotifyPhoneEnglishBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneEnglishBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneEnglishBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void NotifyPhoneBasicWithTransferCompletedEventHandler(object sender, NotifyPhoneBasicWithTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneBasicWithTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneBasicWithTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetMultipleQueueIdStatusCompletedEventHandler(object sender, GetMultipleQueueIdStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleQueueIdStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleQueueIdStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void NotifyMultiplePhoneBasicCompletedEventHandler(object sender, NotifyMultiplePhoneBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyMultiplePhoneBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyMultiplePhoneBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void NotifyPhoneBasicCompletedEventHandler(object sender, NotifyPhoneBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void NotifyPhoneBasicWithTryCountCompletedEventHandler(object sender, NotifyPhoneBasicWithTryCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneBasicWithTryCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneBasicWithTryCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void NotifyPhoneAdvancedCompletedEventHandler(object sender, NotifyPhoneAdvancedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetResponseCodesCompletedEventHandler(object sender, GetResponseCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponseCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResponseCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void getVoicesCompletedEventHandler(object sender, getVoicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVoicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVoicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Voice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Voice[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591